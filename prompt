#!/usr/bin/env bash

############
## Colors ##
############
normal="\[\e[0m\]"
white="\[\e[37;1m\]"
red="\[\e[31;1m\]"
green="\[\e[32;1m\]"
yellow="\[\e[33;1m\]"
echo_red="\033[31;1m"
echo_green="\033[32;1m"
echo_yellow="\033[33;1m"
echo_white="\033[37;1m"
cyan="\e[1;49;36m"
cuser="\[\e[0;32m\]"
chost="\[\e[38;5;230m\]"
cdir="\[\e[38;5;117m\]"

#############
## Symbols ##
#############
Line="\342\224\200"
LineA="\342\224\214\342\224\200"
SX="\342\234\227"
LineB="\342\224\224\342\224\200\342\224\200"
Circle="\342\227\217"
Face="\342\230\273"

#############
# GitHelper #
#############
scm_info() {
	local s='';
	local branchName='';

	# Check if the current directory is in a Git repository.
	if [ $(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}") == '0' ]; then

		# check if the current directory is in .git before running git checks
		if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then

			# Ensure the index is up to date.
			git update-index --really-refresh -q &>/dev/null;

			# Check for uncommitted changes in the index.
			if ! $(git diff --quiet --ignore-submodules --cached); then
				s+='+';
			fi;

			# Check for unstaged changes.
			if ! $(git diff-files --quiet --ignore-submodules --); then
				s+='!';
			fi;

			# Check for untracked files.
			if [ -n "$(git ls-files --others --exclude-standard)" ]; then
				s+='?';
			fi;

			# Check for stashed files.
			if $(git rev-parse --verify refs/stash &>/dev/null); then
				s+='$';
			fi;

		fi;

		# Get the short symbolic ref.
		# If HEAD isnâ€™t a symbolic ref, get the short SHA for the latest commit
		# Otherwise, just give up.
		branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
			git rev-parse --short HEAD 2> /dev/null || \
			echo '(unknown)')";

		[ -n "${s}" ] && s="[${s}]";

		echo -e "${echo_white}${s} ${echo_green}${branchName}";
	else
		return;
	fi;
}

PS1=""
#PS2=""
LEFT=""
RIGHT=""

# User Info
LEFT+="${normal}${LineA}${normal}${Line}${white}["
LEFT+="${cuser}\u${normal}@${chost}\h"
LEFT+="${white}]${normal}${Line}"
# Directory
LEFT+="${white}["
LEFT+="${cdir}\w"
LEFT+="${white}]${normal}${Line}"
# SCM
LEFT+="\$(scm_info)"

___cursor_right="\e[500C"
LEFT+="${___cursor_right}"

__right_len=0
# Clock
RIGHT+="${white}["
DATE="${cyan}\d - \A"
RIGHT+=${DATE}
RIGHT+="${white}]"
__right_len=$((__right_len + 1 + ${#DATE} + 1))
# Battery
battery(){
    batp=$(battery_percentage)
    if [ "$batp" -eq 50 ] || [ "$batp" -gt 50 ]; then
        color=$echo_green
    elif [ "$batp" -lt 50 ] && [ "$batp" -gt 25 ]; then
        color=$echo_yellow
    elif [ "$batp" -eq 25 ] || [ "$batp" -lt 25 ]; then
        color=$echo_red
    fi
    ac_adapter_connected && charge="+"
    ac_adapter_disconnected && charge="-"
    echo -e "${color}${charge}${batp}"
}
RIGHT+="${white}["
BAT="\$(battery)"
RIGHT+=${BAT}
RIGHT+="${white}]"
__right_len=$((__right_len + 1 + ${#BAT} -7 + 1))

___cursor_adjust="\e[${__right_len}D"
LEFT+="${___cursor_adjust}"

PS1+="${LEFT}"
PS1+="${RIGHT}"
PS1+="\n${white}"

prompt="${normal}${LineB}${white}${Circle}"
if [ $(sudo -n id -u 2>&1 | grep 0) ]; then
    prompt="${normal}${LineB}${bold_red}${Face}"
fi
PS1+="${prompt}${normal} "
